# -*- coding: utf-8 -*-
"""GP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lYeau54BlzfQNkeURiz5TFwwWqxp43qm

**Imports**
"""

import os
import platform
import matplotlib.pyplot as plt
from cv2 import cv2
import numpy as np
import silence_tensorflow  # pylint: disable=unused-import
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from keras.utils import to_categorical
from tensorflow.keras.preprocessing.image import ImageDataGenerator

gpus = tf.config.experimental.list_physical_devices(device_type="GPU")
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

from keras.applications.resnet import ResNet50

# from google.colab import drive
# from google.colab.patches import cv2_imshow

"""**Mounting Google Drive for file read/write**"""

# drive.mount('/collabdatafol')

"""**Defining Shuffle Funciton**"""

# Shuffles the passed arrays while maintaining correspondance
# uses numpy permutation generator
def shuffle(a, b):
    p = np.random.permutation(len(a))
    return a[p], b[p]


def cv2_imshow(im):
    # cv2.imshow("out", im)
    # cv2.waitKey(0)
    pass


"""**Data Augmentation with Random Horizontal translations**"""

imagesLeft = np.load("./leftNew.npy")
print(imagesLeft.shape)
imagesRight = np.load("./rightNew.npy")
print(imagesRight.shape)
imagesFalse = np.load("./false.npy")
print(imagesFalse.shape)


cv2_imshow(imagesLeft[-100])
cv2_imshow(imagesLeft[1100])
cv2_imshow(imagesRight[-100])
cv2_imshow(imagesRight[1200])
cv2_imshow(imagesFalse[-100])

"""**Preparing Model Data**"""

x_train = np.concatenate((imagesLeft, imagesRight, imagesFalse))
print(x_train.shape)

for i in x_train:
    i = i / 255

leftLabels = np.array([0] * imagesLeft.shape[0])
rightLabels = np.array([1] * imagesRight.shape[0])
falseLabels = np.array([2] * imagesFalse.shape[0])

y_train = np.concatenate((leftLabels, rightLabels, falseLabels))
y_train = np.reshape(y_train, (y_train.shape[0], 1))
y_train = to_categorical(y_train, num_classes=3)
print(x_train.shape, y_train.shape)

x_train, y_train = shuffle(x_train, y_train)

print(x_train.shape, y_train.shape)

"""**Setting The Model**"""

new_input = keras.Input(shape=(480, 270, 3))
coreModel = ResNet50(include_top=False, input_tensor=new_input)
for i in range(0, len(coreModel.layers) - 100):
    coreModel.layers[i].trainable = False
model = keras.models.Sequential()
model.add(coreModel)
model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(3, activation="softmax"))


model.summary()
# 0.0001
adamOptimizer = keras.optimizers.Adam(learning_rate=0.001)
model.compile(
    loss="categorical_crossentropy", optimizer=adamOptimizer, metrics=["accuracy"]
)

model.fit(x_train, y_train, batch_size=16, epochs=11, validation_split=0.1)

model.save(f"./all.h5", save_format="h5")

data_augmentation = tf.keras.Sequential(
    [
        layers.experimental.preprocessing.RandomTranslation(
            0, (0.1, 0.2), fill_mode="nearest"
        )
    ]
)

leftAugmented = np.array(data_augmentation(imagesLeft))
rightAugmented = np.array(data_augmentation(imagesRight))
# falseAugmented = data_augmentation(imagesFalse)
print(leftAugmented.shape)
print(rightAugmented.shape)

cv2_imshow(leftAugmented[1100])
cv2_imshow(leftAugmented[100])
cv2_imshow(rightAugmented[1200])

model = keras.models.load_model("./all.h5")

x_train = np.concatenate((leftAugmented, rightAugmented))
print(x_train.shape)
# x_train = x_train / 255

for i in x_train:
    i = i / 255

leftLabels = np.array([0] * leftAugmented.shape[0])
rightLabels = np.array([1] * rightAugmented.shape[0])

y_train = np.concatenate((leftLabels, rightLabels))
y_train = np.reshape(y_train, (y_train.shape[0], 1))
y_train = to_categorical(y_train, num_classes=3)
print(x_train.shape, y_train.shape)

x_train, y_train = shuffle(x_train, y_train)

model.fit(x_train, y_train, batch_size=8, epochs=11, validation_split=0.1)

model.save(f"./allaug.h5", save_format="h5")

cv2_imshow(x_train[1100])
print(y_train[1100])
cv2_imshow(x_train[1101])
print(y_train[1101])
cv2_imshow(x_train[1102])
print(y_train[1102])
cv2_imshow(x_train[1103])
print(y_train[1103])
cv2_imshow(x_train[1104])
print(y_train[1104])